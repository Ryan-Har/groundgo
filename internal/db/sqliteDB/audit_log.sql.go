// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_log.sql

package sqliteDB

import (
	"context"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO auth_audit_log (
  user_id,
  event_type,
  ip_address,
  user_agent,
  details
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, user_id, event_type, ip_address, user_agent, details, created_at
`

type CreateAuditLogParams struct {
	UserID    *string `json:"userId"`
	EventType string  `json:"eventType"`
	IpAddress *string `json:"ipAddress"`
	UserAgent *string `json:"userAgent"`
	Details   *string `json:"details"`
}

// CreateAuditLog inserts a new security event into the audit trail.
func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuthAuditLog, error) {
	row := q.db.QueryRowContext(ctx, createAuditLog,
		arg.UserID,
		arg.EventType,
		arg.IpAddress,
		arg.UserAgent,
		arg.Details,
	)
	var i AuthAuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.IpAddress,
		&i.UserAgent,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const listAuditLogsByEventType = `-- name: ListAuditLogsByEventType :many
SELECT id, user_id, event_type, ip_address, user_agent, details, created_at FROM auth_audit_log
WHERE event_type = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListAuditLogsByEventTypeParams struct {
	EventType string `json:"eventType"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

// ListAuditLogsByEventType retrieves a paginated list of audit events of a specific type,
// ordered from newest to oldest.
func (q *Queries) ListAuditLogsByEventType(ctx context.Context, arg ListAuditLogsByEventTypeParams) ([]AuthAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, listAuditLogsByEventType, arg.EventType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthAuditLog{}
	for rows.Next() {
		var i AuthAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsForUser = `-- name: ListAuditLogsForUser :many
SELECT id, user_id, event_type, ip_address, user_agent, details, created_at FROM auth_audit_log
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListAuditLogsForUserParams struct {
	UserID *string `json:"userId"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
}

// ListAuditLogsForUser retrieves a paginated list of audit events for a specific user,
// ordered from newest to oldest.
func (q *Queries) ListAuditLogsForUser(ctx context.Context, arg ListAuditLogsForUserParams) ([]AuthAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, listAuditLogsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthAuditLog{}
	for rows.Next() {
		var i AuthAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
