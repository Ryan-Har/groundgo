// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package sqliteDB

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id,
  user_id,
  expires_at,
  ip_address,
  user_agent
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, user_id, expires_at, ip_address, user_agent, created_at
`

type CreateSessionParams struct {
	ID        string  `json:"id"`
	UserID    int64   `json:"userId"`
	ExpiresAt int64   `json:"expiresAt"`
	IpAddress *string `json:"ipAddress"`
	UserAgent *string `json:"userAgent"`
}

// CreateSession creates a new session record for a user.
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at <= strftime('%s', 'now')
`

// DeleteExpiredSessions purges all session records that have passed their expiration time.
// This should be run periodically by a background job.
func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = ?
`

// DeleteSession removes a specific session, effectively logging the user out.
func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
DELETE FROM sessions
WHERE user_id = ?
`

// DeleteSessionsByUserID removes all active sessions for a given user.
// This is useful for "log out from all other devices" functionality.
func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionsByUserID, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, expires_at, ip_address, user_agent, created_at FROM sessions
WHERE id = ? AND expires_at > strftime('%s', 'now')
`

// GetSession retrieves a single, active session by its ID.
// It will not return a session if it has expired.
func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}
