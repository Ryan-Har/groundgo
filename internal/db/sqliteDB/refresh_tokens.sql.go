// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package sqliteDB

import (
	"context"
)

const createRefreshToken = `-- name: CreateRefreshToken :one

INSERT INTO refresh_tokens (
    id,
    user_id,
    token_hash,
    expires_at
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, user_id, token_hash, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	TokenHash string `json:"tokenHash"`
	ExpiresAt int64  `json:"expiresAt"`
}

// --
// ## Refresh Token Queries
//
// This file defines the SQLC queries for managing user refresh tokens.
// A refresh token is a long-lived credential used to obtain a new access token.
// For security, we only store a SHA-256 hash of the token in the database.
// --
// Inserts a new refresh token record into the database. It returns the newly
// created record.
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at <= strftime('%s', 'now')
`

// DeleteExpiredRefreshTokens purges tokens from the refresh list
// after they would have naturally expired. This keeps the table clean.
func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteRefreshTokenByID = `-- name: DeleteRefreshTokenByID :exec
DELETE FROM refresh_tokens
WHERE id = ?
`

// Deletes a refresh token by its unique primary key (id). This is the most
// efficient way to delete a token after it has been successfully used for rotation.
func (q *Queries) DeleteRefreshTokenByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByID, id)
	return err
}

const deleteUserRefreshTokens = `-- name: DeleteUserRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE user_id = ?
`

// Deletes all refresh tokens associated with a specific user ID. This is a crucial
// security measure to invalidate all sessions for a user if a compromised token
// is detected or if they request a "log out from all devices" action.
func (q *Queries) DeleteUserRefreshTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserRefreshTokens, userID)
	return err
}

const getRefreshTokenByHash = `-- name: GetRefreshTokenByHash :one
SELECT id, user_id, token_hash, expires_at, created_at FROM refresh_tokens
WHERE token_hash = ? LIMIT 1
`

// Retrieves a single refresh token by its SHA-256 hash. This is the primary
// method for looking up a token when a user tries to refresh their session.
func (q *Queries) GetRefreshTokenByHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
