// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes   = "BearerAuth.Scopes"
	RefreshTokenScopes = "RefreshToken.Scopes"
)

// Defines values for Role.
const (
	RoleAdmin     Role = "admin"
	RoleAuditor   Role = "auditor"
	RoleEditor    Role = "editor"
	RoleGuest     Role = "guest"
	RoleModerator Role = "moderator"
	RoleOwner     Role = "owner"
	RoleReadonly  Role = "readonly"
	RoleSupport   Role = "support"
	RoleSysadmin  Role = "sysadmin"
	RoleUser      Role = "user"
)

// Claims Claims is an object mapping API paths to user roles.
//
//   - Each key is an API path (e.g. "/", "/users")
//   - Each value is the role required to access that path
//   - Roles are defined in the Role schema (see #/components/schemas/Role)
//   - The root path "/" and the users assigned role will always be synced up. Updating the root path will update the users role and vice versa
type Claims map[string]Role

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Claims Claims is an object mapping API paths to user roles.
	//
	//  - Each key is an API path (e.g. "/", "/users")
	//  - Each value is the role required to access that path
	//  - Roles are defined in the Role schema (see #/components/schemas/Role)
	//  - The root path "/" and the users assigned role will always be synced up. Updating the root path will update the users role and vice versa
	Claims *Claims `json:"claims,omitempty"`

	// Email User's email address
	Email Email `json:"email"`

	// Password User's password
	Password string `json:"password"`

	// Role Possible user roles in the system
	Role *Role `json:"role,omitempty"`
}

// Email User's email address
type Email = openapi_types.Email

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details"`

	// Error Error message
	Error string `json:"error"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email User's email address
	Email Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// ExpiresIn Token expiration time in seconds
	ExpiresIn int `json:"expiresIn"`

	// RefreshToken Refresh token (also set as httpOnly cookie)
	RefreshToken *string `json:"refreshToken"`

	// Token JWT access token
	Token string `json:"token"`
	User  User   `json:"user"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	// Limit Items per page
	Limit int `json:"limit"`

	// Page Current page number
	Page int `json:"page"`

	// Total Total number of items
	Total int `json:"total"`

	// TotalPages Total number of pages
	TotalPages int `json:"totalPages"`
}

// PasswordUpdateRequest required
type PasswordUpdateRequest struct {
	// CurrentPassword Current password
	CurrentPassword string `json:"currentPassword"`

	// NewPassword New password
	NewPassword string `json:"newPassword"`
}

// Role Possible user roles in the system
type Role string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// ExpiresIn Token expiration time in seconds
	ExpiresIn int `json:"expiresIn"`

	// Token New JWT access token
	Token string `json:"token"`
}

// TokenValidationResponse defines model for TokenValidationResponse.
type TokenValidationResponse struct {
	// ExpiresAt Token expiration time
	ExpiresAt *time.Time `json:"expiresAt"`

	// Valid Whether the token is valid
	Valid bool `json:"valid"`
}

// User defines model for User.
type User struct {
	// Claims Claims is an object mapping API paths to user roles.
	//
	//  - Each key is an API path (e.g. "/", "/users")
	//  - Each value is the role required to access that path
	//  - Roles are defined in the Role schema (see #/components/schemas/Role)
	//  - The root path "/" and the users assigned role will always be synced up. Updating the root path will update the users role and vice versa
	Claims Claims `json:"claims"`

	// CreatedAt Account creation timestamp
	CreatedAt time.Time `json:"createdAt"`

	// Email User's email address
	Email Email `json:"email"`

	// Id Unique user identifier
	Id openapi_types.UUID `json:"id"`

	// IsActive Whether the user account is active
	IsActive bool `json:"isActive"`

	// OauthId OAuth provider user ID
	OauthId *string `json:"oauthId"`

	// OauthProvider OAuth provider (if OAuth login used)
	OauthProvider *string `json:"oauthProvider"`

	// Role Possible user roles in the system
	Role Role `json:"role"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Meta  PaginationMeta `json:"meta"`
	Users []User         `json:"users"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// UserUpdateRequest Fields allowed to be updated in a user record
type UserUpdateRequest struct {
	// Claims Claims is an object mapping API paths to user roles.
	//
	//  - Each key is an API path (e.g. "/", "/users")
	//  - Each value is the role required to access that path
	//  - Roles are defined in the Role schema (see #/components/schemas/Role)
	//  - The root path "/" and the users assigned role will always be synced up. Updating the root path will update the users role and vice versa
	Claims *Claims `json:"claims,omitempty"`

	// Email User's email address
	Email *Email `json:"email,omitempty"`

	// IsActive Whether the user account is active
	IsActive *bool `json:"isActive,omitempty"`

	// OauthProvider OAuth provider (if OAuth login used)
	OauthProvider *string `json:"oauthProvider"`

	// Role Possible user roles in the system
	Role *Role `json:"role,omitempty"`
}

// UserIdParam defines model for UserIdParam.
type UserIdParam = openapi_types.UUID

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// Conflict defines model for Conflict.
type Conflict = ErrorResponse

// Forbidden defines model for Forbidden.
type Forbidden = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// InvalidCredentials defines model for InvalidCredentials.
type InvalidCredentials = ErrorResponse

// InvalidRefreshToken defines model for InvalidRefreshToken.
type InvalidRefreshToken = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Role Filter users by role
	Role *Role `form:"role,omitempty" json:"role,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = CreateUserRequest

// ChangeOwnPasswordJSONRequestBody defines body for ChangeOwnPassword for application/json ContentType.
type ChangeOwnPasswordJSONRequestBody = PasswordUpdateRequest

// UpdateUserByIDJSONRequestBody defines body for UpdateUserByID for application/json ContentType.
type UpdateUserByIDJSONRequestBody = UserUpdateRequest
