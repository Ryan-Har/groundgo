{
	"info": {
		"_postman_id": "11503a88-9cdf-48ed-b819-02ef6e7c1978",
		"name": "Auth API",
		"description": "A comprehensive authentication and authorization API for the GroundGo library.\nProvides user management, role-based access control, and hierarchical path-specific claims.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15568147"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "User login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var token = jsonData.token;",
											"pm.environment.set(\"bearerToken\", token);",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields: expiresIn and token\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('expiresIn', 'token');",
											"});",
											"",
											"",
											"pm.test(\"Token must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"ExpiresIn must be a positive integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.expiresIn).to.exist.and.to.be.a('number').and.to.be.above(0, \"ExpiresIn should be a positive integer\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"ryan@example.com\",\n  \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "Authenticate user with email and password"
							},
							"response": [
								{
									"name": "Successful login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"expiresIn\": 7619\n  \"token\": \"string\",\n}"
								},
								{
									"name": "Invalid JSON format",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid JSON format\",\n  \"details\": \"Expected valid JSON object\"\n}"
								},
								{
									"name": "Missing required field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"validation failed\",\n  \"details\": \"email is required\"\n}"
								},
								{
									"name": "Invalid login credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid credentials\",\n  \"details\": \"email or password is incorrect\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"An unexpected error occurred\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "User logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								},
								"description": "Invalidate current session"
							},
							"response": [
								{
									"name": "Successfully logged out",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "refresh",
					"item": [
						{
							"name": "Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.eql(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields: error and details\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('error', 'details');",
											"});",
											"",
											"",
											"pm.test(\"Error must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Details must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Details should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "refresh_token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								},
								"description": "Generate new access token using refresh token"
							},
							"response": [
								{
									"name": "Token refreshed successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "refresh_token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"string\",\n  \"expiresIn\": 7804\n}"
								},
								{
									"name": "Missing refresh token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "refresh_token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"missing refresh token\",\n  \"details\": \"refresh token cookie not found\"\n}"
								},
								{
									"name": "Invalid refresh token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "refresh_token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid refresh token\",\n  \"details\": \"token is expired, invalid, or has been revoked\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "refresh_token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "verify",
					"item": [
						{
							"name": "Verify token validity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.eql(403);",
											"});",
											"",
											"",
											"pm.test(\"Response contains an error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response includes the details field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('details');",
											"});",
											"",
											"",
											"pm.test('Error and details fields should not expose sensitive information', function () {",
											"    const responseData = pm.response.json();",
											"    const sensitiveWords = ['password', 'username', 'email', 'token'];",
											"",
											"    if (responseData.error) {",
											"        pm.expect(sensitiveWords.some(word => responseData.error.includes(word))).to.be.false;",
											"    }",
											"    if (responseData.details) {",
											"        pm.expect(sensitiveWords.some(word => responseData.details.includes(word))).to.be.false;",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"verify"
									]
								},
								"description": "Check if current access token is valid"
							},
							"response": [
								{
									"name": "Token is valid",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"verify"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"expiresAt\": \"1992-12-20T22:44:41.309Z\",\n  \"valid\": true\n}"
								},
								{
									"name": "Missing authentication token",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"verify"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"authentication required\",\n  \"details\": \"bearer token must be provided\"\n}"
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"verify"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"verify"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Response contains an error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields: error and details\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('error', 'details');",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "urn:uuid:32ce014b-51b6-74d4-647d-222e5e98788d",
											"description": "(Required) User ID"
										}
									]
								},
								"description": "Retrieve a specific user by their ID"
							},
							"response": [
								{
									"name": "User retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user\": {\n    \"id\": \"4cc729f0-fdd4-e1c0-3e27-d53bf06cc03b\",\n    \"email\": \"user@example.com\",\n    \"role\": \"auditor\",\n    \"claims\": {\n      \"key_0\": \"readonly\",\n      \"key_1\": \"owner\"\n    },\n    \"createdAt\": \"2024-07-20T14:18:45.758Z\",\n    \"updatedAt\": \"1957-03-01T16:06:44.699Z\",\n    \"isActive\": true,\n    \"oauthProvider\": \"stri\",\n    \"oauthId\": \"string\"\n  }\n}"
								},
								{
									"name": "Invalid ID format",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"validation failed\",\n    \"details\": \"invalid uuid format in path\"\n}"
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Access denied - insufficient permissions",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
								},
								{
									"name": "Requested resource not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"resource not found\",\n  \"details\": \"user with specified ID not found\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						},
						{
							"name": "Update a single user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.eql(403);",
											"});",
											"",
											"",
											"pm.test(\"Response contains an error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('details').that.is.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response should contain required fields: error and details\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('error', 'details');",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Error message should be descriptive enough for debugging\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
											"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Details message should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "urn:uuid:32ce014b-51b6-74d4-647d-222e5e98788d",
											"description": "(Required) User ID"
										}
									]
								},
								"description": "Update a single user. For use by admin.\n- Partial updates are allowed\n- To update your own profile if you you do not have permission use path /users/me\n"
							},
							"response": [
								{
									"name": "User updated successfully",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user\": {\n    \"id\": \"4cc729f0-fdd4-e1c0-3e27-d53bf06cc03b\",\n    \"email\": \"user@example.com\",\n    \"role\": \"auditor\",\n    \"claims\": {\n      \"key_0\": \"readonly\",\n      \"key_1\": \"owner\"\n    },\n    \"createdAt\": \"2024-07-20T14:18:45.758Z\",\n    \"updatedAt\": \"1957-03-01T16:06:44.699Z\",\n    \"isActive\": true,\n    \"oauthProvider\": \"string\",\n    \"oauthId\": \"string\"\n  }\n}"
								},
								{
									"name": "Invalid JSON format",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid JSON format\",\n  \"details\": \"expected valid JSON object\"\n}"
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Access denied - insufficient permissions",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
								},
								{
									"name": "Requested resource not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"resource not found\",\n  \"details\": \"user with specified ID not found\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								},
								{
									"name": "Validation failed",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"role\": \"readonly\",\n  \"claims\": {\n    \"key_0\": \"sysadmin\"\n  },\n  \"oauthProvider\": \"string\",\n  \"isActive\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "urn:uuid:32ce014b-51b6-74d4-647d-222e5e98788d",
													"description": "(Required) User ID"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [
										{
											"expires": "Invalid Date"
										}
									],
									"body": "{\r\n    \"error\": \"validation failed\",\r\n    \"details\": \"email address userexample.com is not a valid RFC 5322 format\"\r\n}"
								}
							]
						},
						{
							"name": "Permanently delete a single user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Response has required error fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('error', 'details');",
											"});",
											"",
											"",
											"pm.test(\"The error message must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "urn:uuid:32ce014b-51b6-74d4-647d-222e5e98788d",
											"description": "(Required) User ID"
										}
									]
								}
							},
							"response": [
								{
									"name": "delete Successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Access denied - insufficient permissions",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
								},
								{
									"name": "Requested resource not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"resource not found\",\n  \"details\": \"User with specified ID does not exist\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "me",
					"item": [
						{
							"name": "change-password",
							"item": [
								{
									"name": "Change password of logged in user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.expect(pm.response.code).to.eql(403);",
													"});",
													"",
													"",
													"pm.test(\"Response contains required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('error', 'details');",
													"});",
													"",
													"",
													"pm.test(\"The error message must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('error').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currentPassword\": \"Password123\",\n    \"newPassword\": \"password\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/me/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me",
												"change-password"
											]
										}
									},
									"response": [
										{
											"name": "Password changed successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid JSON format",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"invalid JSON format\",\n  \"details\": \"expected valid JSON object\"\n}"
										},
										{
											"name": "Missing required field",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"validation failed\",\n  \"details\": \"current password is is required\"\n}"
										},
										{
											"name": "Invalid token",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
										},
										{
											"name": "Invalid password",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currentPassword\": \"string\",\n  \"newPassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/me/change-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"me",
														"change-password"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": null,
											"header": null,
											"cookie": [],
											"body": "{\r\n    \"error\": \"invalid credentials\",\r\n    \"details\": \"email or password is incorrect\"\r\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get logged in user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Response contains an error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('error', 'details');",
											"});",
											"",
											"",
											"pm.test(\"Error message must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Retrieve a users own User record"
							},
							"response": [
								{
									"name": "User retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user\": {\n    \"id\": \"4cc729f0-fdd4-e1c0-3e27-d53bf06cc03b\",\n    \"email\": \"user@example.com\",\n    \"role\": \"auditor\",\n    \"claims\": {\n      \"key_0\": \"readonly\",\n      \"key_1\": \"owner\"\n    },\n    \"createdAt\": \"2024-07-20T14:18:45.758Z\",\n    \"updatedAt\": \"1957-03-01T16:06:44.699Z\",\n    \"isActive\": true,\n    \"oauthProvider\": \"stri\",\n    \"oauthId\": \"string\"\n  }\n}"
								},
								{
									"name": "Invalid token",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
								},
								{
									"name": "Access denied - insufficient permissions",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.eql(403);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('details').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response contains details about the error\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('details').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of items per page (1-100)"
								},
								{
									"key": "role",
									"value": "auditor",
									"description": "Filter users by role"
								}
							]
						},
						"description": "Retrieve a list of all users (admin only)"
					},
					"response": [
						{
							"name": "Users retrieved successfully",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"users\": [\n    {\n      \"id\": \"9a6fd789-c9ae-77af-ca2d-8a28140a26d7\",\n      \"email\": \"user@example.com\",\n      \"role\": \"auditor\",\n      \"claims\": {\n        \"key_0\": \"sysadmin\",\n        \"key_1\": \"support\",\n        \"key_2\": \"owner\"\n      },\n      \"createdAt\": \"1979-02-05T18:14:17.162Z\",\n      \"updatedAt\": \"2007-04-05T19:35:59.619Z\",\n      \"isActive\": true,\n      \"oauthProvider\": \"string\",\n      \"oauthId\": \"string\"\n    },\n    {\n      \"id\": \"557a4f36-f390-75aa-610d-afb915a9bf35\",\n      \"email\": \"user@example.com\",\n      \"role\": \"support\",\n      \"claims\": {\n        \"key_0\": \"user\",\n        \"key_1\": \"moderator\"\n      },\n      \"createdAt\": \"2024-07-31T22:23:57.205Z\",\n      \"updatedAt\": \"1975-12-26T22:22:46.935Z\",\n      \"isActive\": true,\n      \"oauthProvider\": \"string\",\n      \"oauthId\": \"string\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 6812,\n    \"limit\": 259,\n    \"total\": 9312,\n    \"totalPages\": 6158\n  }\n}"
						},
						{
							"name": "Missing required field",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"validation failed\",\n  \"details\": \"page parameter is required\"\n}"
						},
						{
							"name": "Limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"validation failed\",\n  \"details\": \"limit must be between 1 and 100\"\n}"
						},
						{
							"name": "Invalid token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
						},
						{
							"name": "Access denied - insufficient permissions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
						},
						{
							"name": "No results",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=1&limit=20&role=auditor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number for pagination"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per page (1-100)"
										},
										{
											"key": "role",
											"value": "auditor",
											"description": "Filter users by role"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\r\n    \"error\": \"resource not found\",\r\n    \"details\": \"no results\"\r\n}"
						}
					]
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"",
									"pm.test(\"Response contains the error field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('error');",
									"});",
									"",
									"",
									"pm.test(\"The error message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user account (admin only)"
					},
					"response": [
						{
							"name": "User created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user\": {\n    \"id\": \"4cc729f0-fdd4-e1c0-3e27-d53bf06cc03b\",\n    \"email\": \"user@example.com\",\n    \"role\": \"auditor\",\n    \"claims\": {\n      \"key_0\": \"readonly\",\n      \"key_1\": \"owner\"\n    },\n    \"createdAt\": \"2024-07-20T14:18:45.758Z\",\n    \"updatedAt\": \"1957-03-01T16:06:44.699Z\",\n    \"isActive\": true,\n    \"oauthProvider\": \"stri\",\n    \"oauthId\": \"string\"\n  }\n}"
						},
						{
							"name": "Invalid JSON format",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid JSON format\",\n  \"details\": \"expected valid JSON object\"\n}"
						},
						{
							"name": "Missing required field",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"validation failed\",\n  \"details\": \"email is required\"\n}"
						},
						{
							"name": "Invalid token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid token\",\n  \"details\": \"token is expired or malformed\"\n}"
						},
						{
							"name": "Access denied - insufficient permissions",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access denied\",\n  \"details\": \"insufficient permissions for this operation\"\n}"
						},
						{
							"name": "Resource conflict (e.g., email already exists)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"resource conflict\",\n  \"details\": \"email already exists\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"stringstring\",\n  \"role\": \"sysadmin\",\n  \"claims\": {\n    \"key_0\": \"guest\",\n    \"key_1\": \"auditor\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"internal server error\",\n  \"details\": \"an unexpected error occurred\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8080/api/v1"
		}
	]
}