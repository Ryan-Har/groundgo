package templates

import (
	"encoding/json"
	"fmt"
	"github.com/Ryan-Har/groundgo/pkg/models"
	"time"
)

templ AdminPage(users []*models.User) {
	@adminStyle()
	<div class="container is-fluid" x-data="admin">
		@pageHeader()
		<div class="container">
			@pageStatistics(pageStatisticsxData(users))
			@pageFilters()
			@UserTable(users)
		</div>
	</div>
	@alpineFunctions()
}

templ pageHeader() {
	<div class="page-header">
		<div class="container">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<h1 class="title is-3">User Management</h1>
							<p class="subtitle is-6">
								Manage users and their permissions
							</p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<button class="button is-primary">
							<span class="icon">
								<i class="fas fa-plus"></i>
							</span>
							<span>Add User</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ pageStatistics(xData string) {
	<div
		class="columns is-multiline mb-5"
		x-data={ xData }
		@update-stats.window="updateStats($event)"
	>
		@statisticsTotalCard()
		@statisticsActiveCard()
		@statisticsInactiveCard()
		@statisticsAdminCard()
	</div>
}

// pageStatisticsxData formats the x-data for the statistics component
func pageStatisticsxData(users []*models.User) string {
	var total, active, inactive, admin int
	for _, user := range users {
		total++
		if user.Claims.HasAtLeast("/", models.RoleAdmin) {
			admin++
		}
		if user.IsActive {
			active++
		} else {
			inactive++
		}
	}

	return fmt.Sprintf(`{
        stats: {
            total: %d,
            active: %d,
            inactive: %d,
            admin: %d
        },
        flashing: {
            total: false,
            active: false,
            inactive: false,
            admin: false    
        },
        updateStats(event) {
            const updates = event.detail;
            for (const key in updates) {
                if (this.stats.hasOwnProperty(key)) {
                    this.stats[key] += updates[key];
                    this.flashStat(key);
                }
            }
        },
        flashStat(statKey) {
            this.flashing[statKey] = true;
            setTimeout(() => {
                this.flashing[statKey] = false;
            }, 1000);   
        }
    }`, total, active, inactive, admin)
}

templ statisticsTotalCard() {
	<div class="column is-3">
		<div class="stats-card" :class="{ flash: flashing.total }">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<p class="heading">Total Users</p>
							<p class="title is-4" x-text="stats.total"></p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<span class="icon is-large has-text-primary">
							<i class="fas fa-users fa-2x"></i>
						</span>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ statisticsActiveCard() {
	<div class="column is-3">
		<div class="stats-card" :class="{ flash: flashing.active }">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<p class="heading">Active Users</p>
							<p class="title is-4" x-text="stats.active"></p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<span class="icon is-large has-text-success">
							<i class="fas fa-user-check fa-2x"></i>
						</span>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ statisticsInactiveCard() {
	<div class="column is-3">
		<div class="stats-card" :class="{ flash: flashing.inactive }">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<p class="heading">Inactive Users</p>
							<p class="title is-4" x-text="stats.inactive"></p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<span class="icon is-large has-text-warning">
							<i class="fas fa-user-clock fa-2x"></i>
						</span>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ statisticsAdminCard() {
	<div class="column is-3">
		<div class="stats-card" :class="{ flash: flashing.admin }">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<p class="heading">Admin Users</p>
							<p class="title is-4" x-text="stats.admin"></p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<span class="icon is-large has-text-danger">
							<i class="fas fa-user-shield fa-2x"></i>
						</span>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ pageFilters() {
	<div class="box mb-5 filter-box">
		<div class="columns">
			<div class="column is-4">
				<div class="field">
					<label class="label">Search Users</label>
					<div class="control has-icons-left">
						<input
							class="input"
							type="text"
							placeholder="Search by name or email..."
						/>
						<span class="icon is-small is-left">
							<i class="fas fa-search"></i>
						</span>
					</div>
				</div>
			</div>
			<div class="column is-3">
				<div class="field">
					<label class="label">Status</label>
					<div class="control">
						<div class="select is-fullwidth">
							<select>
								<option>All Status</option>
								<option>Active</option>
								<option>Inactive</option>
								<option>Pending</option>
							</select>
						</div>
					</div>
				</div>
			</div>
			<div class="column is-3">
				<div class="field">
					<label class="label">Claims</label>
					<div class="control">
						<div class="select is-fullwidth">
							<select>
								<option>All Claims</option>
								<option>user.read</option>
								<option>user.write</option>
								<option>admin.full</option>
								<option>reports.view</option>
								<option>billing.manage</option>
							</select>
						</div>
					</div>
				</div>
			</div>
			<div class="column is-2">
				<div class="field">
					<label class="label">&nbsp;</label>
					<div class="control">
						<button class="button is-link is-fullwidth">
							<span class="icon">
								<i class="fas fa-filter"></i>
							</span>
							<span>Filter</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ UserTable(users []*models.User) {
	<div class="table-container">
		<table class="table is-fullwidth is-hoverable">
			@tableHeader()
			<tbody>
				for _, user := range users {
					@UserRow(user)
				}
			</tbody>
		</table>
	</div>
}

templ tableHeader() {
	<thead>
		<tr>
			<th>
				<label class="checkbox">
					<input type="checkbox"/>
				</label>
			</th>
			<th>User</th>
			<th>Status</th>
			<th>Claims</th>
			<th>Last Update</th>
			<th>Created</th>
		</tr>
	</thead>
}

templ UserRow(user *models.User) {
	<tr
		hx-get={ fmt.Sprintf("/admin/users/%s/edit-row", user.ID.String()) }
		hx-target="this"
		hx-swap="outerHTML"
		class="user-row"
	>
		<td>
			<label class="checkbox">
				<input type="checkbox" @click.stop/>
			</label>
		</td>
		<td>
			<div class="block">
				<p class="is-size-6 has-text-weight-semibold">{ user.Email }</p>
				<p class="is-size-7 has-text-grey">
					{ user.Email }
				</p>
			</div>
		</td>
		<td>
			if user.IsActive {
				<span class="tag is-success">Active</span>
			} else {
				<span class="tag is-warning">Inactive</span>
			}
		</td>
		<td>
			<div class="claims-list">
				for _, claim := range user.Claims.AsSlice() {
					<span class="tag claim-tag">{ claim }</span>
				}
			</div>
		</td>
		<td>
			<span class="has-text-grey-dark" x-text={ fmt.Sprintf("timeUtils.formatTime('%s')", user.UpdatedAt.Format(time.RFC3339)) }>Loading...</span>
		</td>
		<td>
			<span class="has-text-grey-dark" x-text={ fmt.Sprintf("timeUtils.formatTime('%s')", user.CreatedAt.Format(time.RFC3339)) }>Loading...</span>
		</td>
	</tr>
}

templ UserRowEditPartial(user *models.User) {
	<tr
		class="is-selected"
		x-data={ UserRowEditPartialxData(user) }
	>
		<td colspan="6">
			<div class="p-4">
				<div class="field">
					<label class="label">Email</label>
					<div class="control">
						<p class="is-size-6 has-text-grey-light is-italic">{ user.Email }</p>
					</div>
				</div>
				<!-- Warning message -->
				<div x-show="showWarning" class="notification is-warning is-light" x-transition>
					<button class="delete" @click="showWarning = false"></button>
					<p x-text="warningMessage"></p>
				</div>
				<div class="field">
					<label class="label">Current Claims</label>
					<div class="field is-grouped is-grouped-multiline">
						<template x-for="(claim, index) in claims" :key="index">
							<div class="control">
								<div class="tags has-addons">
									<span class="tag is-link" x-text="claim"></span>
									<a class="tag is-delete" @click="removeClaim(index)" title="Remove claim"></a>
								</div>
							</div>
						</template>
						<p x-show="claims.length === 0" class="has-text-grey-light is-italic">
							No claims assigned.
						</p>
					</div>
				</div>
				<div class="field">
					<label class="label">Add New Claim</label>
					<div class="field has-addons">
						<div class="control is-expanded">
							<input class="input" type="text" placeholder="Resource (e.g., /orders/*)" x-model="newClaimResource" @keydown.enter.prevent="addClaim()"/>
						</div>
						<div class="control">
							<span class="select">
								<select x-model="newClaimRole">
									<template x-for="role in availableRoles" :key="role">
										<option :value="role" x-text="role"></option>
									</template>
								</select>
							</span>
						</div>
						<div class="control">
							<button class="button is-info" @click="addClaim()" :disabled="!newClaimResource.trim()">
								Add
							</button>
						</div>
					</div>
				</div>
				<div class="field is-grouped mt-5">
					<div class="control">
						<button
							class="button is-primary"
							hx-put={ fmt.Sprintf("/admin/users/%s/claims", user.ID.String()) }
							hx-target="closest tr"
							hx-swap="outerHTML"
							:hx-vals="JSON.stringify({ claims: claims })"
						>
							✅ Save
						</button>
					</div>
					<div class="control">
						<button
							class="button"
							hx-get={ fmt.Sprintf("/admin/users/%s", user.ID.String()) }
							hx-target="closest tr"
							hx-swap="outerHTML"
						>
							❌ Cancel
						</button>
					</div>
					<div class="control is-expanded"></div>
					<div class="control">
						<button
							class="button is-light is-warning"
							hx-post={ fmt.Sprintf("/admin/users/%s/reset-password", user.ID.String()) }
							hx-swap="none"
						>
							🔑 Reset Password
						</button>
					</div>
					if user.IsActive {
						<div class="control">
							<button
								class="button is-light is-warning"
								hx-post={ fmt.Sprintf("/admin/users/%s/disable", user.ID.String()) }
								hx-target="closest tr"
								hx-swap="outerHTML"
								hx-confirm="Are you sure you want to disable this user?"
							>
								🚫 Disable
							</button>
						</div>
					} else {
						<div class="control">
							<button
								class="button is-light is-warning"
								hx-post={ fmt.Sprintf("/admin/users/%s/enable", user.ID.String()) }
								hx-target="closest tr"
								hx-swap="outerHTML"
							>
								🔓 Enable
							</button>
						</div>
					}
					<div class="control">
						<button
							class="button is-danger"
							hx-delete={ fmt.Sprintf("/admin/users/%s", user.ID.String()) }
							hx-target="closest tr"
							hx-swap="outerHTML"
							hx-confirm="Are you sure you want to permanently delete this user? This action cannot be undone."
						>
							🗑️ Delete
						</button>
					</div>
				</div>
			</div>
		</td>
	</tr>
}

// UserRowEditPartialxData formats the x-data for the UserRowEditPartial component
func UserRowEditPartialxData(u *models.User) string {

	claimsSlice := u.Claims.AsSlice()
	allRoles := models.ListRoles()

	// Ensure we have a default role
	defaultRole := "guest"
	if len(allRoles) > 0 {
		defaultRole = allRoles[0]
	}

	// Helper function to marshal JSON arrays
	marshalStringArray := func(arr []string) string {
		bytes, _ := json.Marshal(arr)
		return string(bytes)
	}

	// Build the x-data object manually to avoid HTML escaping issues
	return fmt.Sprintf(`{
        claims: %s,
        newClaimResource: '',
        newClaimRole: '%s',
        availableRoles: %s,
        warningMessage: '',
        showWarning: false,
        addClaim() {
			const resource = this.newClaimResource.trim();
			if (!resource) return;
			
			const fullClaim = `+"`${resource}:${this.newClaimRole}`"+`;
			
			// Check if resource already exists
			const existingIndex = this.claims.findIndex(claim => 
				claim.split(':')[0] === resource
			);
			
			if (existingIndex !== -1) {
				const existingClaim = this.claims[existingIndex];
				const existingRole = existingClaim.split(':')[1];
				
				// Show warning and replace
				this.warningMessage = `+"`Resource '${resource}' already exists with role '${existingRole}'. It will be replaced with '${this.newClaimRole}'.`"+`;
				this.showWarning = true;
				
				this.claims.splice(existingIndex, 1);
				this.claims.push(fullClaim);
				
				setTimeout(() => { this.showWarning = false; }, 3000);
			} else {
				this.claims.push(fullClaim);
			}
			
			this.newClaimResource = '';
        },
        removeClaim(index) {
            this.claims.splice(index, 1);
        }
    }`,
		marshalStringArray(claimsSlice),
		defaultRole,
		marshalStringArray(allRoles))
}

templ adminStyle() {
	<style>
      .claims-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        margin-top: 0.5rem;
      }
      .claim-tag {
        font-size: 0.75rem;
      }
      .user-actions {
        white-space: nowrap;
      }
      .table-container {
        background: white;
        border-radius: 6px;
        box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1);
      }
      .page-header {
        border-bottom: 1px solid #dbdbdb;
        padding: 1.5rem 0;
        margin-bottom: 2rem;
      }

	  .stats-card {
		border-radius: 6px;
		box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1);
		padding: 1.5rem;
		background-color: #ffffff; /* default light */
		}

		.table tr.is-selected {
		background-color: rgba(0, 209, 178, 0.08);
		}

		.flash {
	 	animation: flash-bg 0.5s ease;
		}

		@keyframes flash-bg {
		0%   { background-color: #fffa8b; } /* bright yellow */
		100% { background-color: transparent; }
		}

		/* Dark mode overrides */
		@media (prefers-color-scheme: dark) {
		.stats-card {
			background-color: #1e1e1e; /* surface color */
			border: 1px solid rgba(255, 255, 255, 0.05);
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.6),
						0 0 0 1px rgba(255, 255, 255, 0.04);
		}
		.stats-card:hover {
			background-color: #262626;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.7),
						0 0 0 1px rgba(255, 255, 255, 0.08);
		}
		.filter-box {
			background-color: #1e1e1e; /* surface color */
			border: 1px solid rgba(255, 255, 255, 0.05);
			box-shadow: 0 2px 6px rgba(0, 0, 0, 0.6),
						0 0 0 1px rgba(255, 255, 255, 0.04);
		}
		.table tr.is-selected {
			background-color: rgba(0, 209, 178, 0.2);
		}
	}

    </style>
}

//TODO
templ pagination() {
	<nav
		class="pagination is-centered mt-5"
		role="navigation"
		aria-label="pagination"
	>
		<a class="pagination-previous" disabled>Previous</a>
		<a class="pagination-next">Next page</a>
		<ul class="pagination-list">
			<li><a class="pagination-link is-current">1</a></li>
			<li><a class="pagination-link">2</a></li>
			<li><a class="pagination-link">3</a></li>
			<li><span class="pagination-ellipsis">&hellip;</span></li>
			<li><a class="pagination-link">47</a></li>
		</ul>
	</nav>
}

templ alpineFunctions() {
	<script>
	document.addEventListener('alpine:init', () => {
	Alpine.data('admin', () => ({
		// timeUtils object holds all time related utilities
		timeUtils: {
			formatTime(isoString) {
				if (!isoString) return 'ERR time format'
				const date = new Date(isoString);
				const now = new Date();
				const diffHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
				if (diffHours < 1) return `less than an hour ago`
				if (diffHours < 72) return `${Math.round(diffHours)} hours ago`;
				return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
			}
		},

	}))
	})
	</script>
}
